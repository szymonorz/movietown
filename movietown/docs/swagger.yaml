basePath: /
definitions:
  api.apiCustomerLogin:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  api.apiCustomerRegister:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone_number:
        type: string
      surname:
        type: string
      username:
        type: string
    required:
    - email
    - name
    - password
    - phone_number
    - surname
    - username
    type: object
  api.changePasswordBody:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  api.customerReservation:
    properties:
      discounts:
        $ref: '#/definitions/model.RequestSeats'
      reservation_type_id:
        type: integer
      screening_id:
        type: integer
      seat_ids:
        items:
          type: integer
        type: array
    required:
    - reservation_type_id
    - screening_id
    - seat_ids
    type: object
  api.newScreening:
    properties:
      movie_hall_id:
        type: integer
      movie_id:
        type: integer
      start_of_screening:
        type: string
    required:
    - movie_hall_id
    - movie_id
    - start_of_screening
    type: object
  api.requestBody:
    properties:
      email:
        type: string
      name:
        type: string
      phone_number:
        type: string
      surname:
        type: string
      username:
        type: string
    required:
    - email
    - name
    - phone_number
    - surname
    - username
    type: object
  api.reservationResponse:
    properties:
      id:
        type: integer
      movie_title:
        type: string
      movie_type:
        type: string
      price:
        type: number
      reservation_type:
        type: string
      seat_count:
        type: integer
      time_of_screening:
        type: string
    type: object
  api.takenSeats:
    properties:
      taken_seat_ids:
        items:
          type: integer
        type: array
    type: object
  model.Customer:
    properties:
      email:
        type: string
      id:
        type: integer
      is_student:
        type: boolean
      name:
        type: string
      password:
        type: string
      phone_number:
        type: string
      surname:
        type: string
      username:
        type: string
    type: object
  model.DiscountType:
    properties:
      discount:
        type: integer
      id:
        type: integer
      type:
        type: string
    type: object
  model.Movie:
    properties:
      description:
        type: string
      director:
        type: string
      id:
        type: integer
      length:
        type: integer
      movie_types:
        items:
          $ref: '#/definitions/model.MovieType'
        type: array
      title:
        type: string
    type: object
  model.MovieHall:
    properties:
      id:
        type: integer
      name:
        type: string
      number_of_seats:
        type: integer
    type: object
  model.MovieMovieType:
    properties:
      id:
        type: integer
      movie:
        $ref: '#/definitions/model.Movie'
      movie_type:
        $ref: '#/definitions/model.MovieType'
      movieId:
        type: integer
      movieTypeId:
        type: integer
    type: object
  model.MovieType:
    properties:
      id:
        type: integer
      price:
        type: number
      type:
        type: string
    type: object
  model.RequestSeats:
    properties:
      children_seats:
        type: integer
      elderly_seats:
        type: integer
      normal_seats:
        type: integer
      student_seats:
        type: integer
    type: object
  model.Reservation:
    properties:
      active:
        type: boolean
      customer:
        $ref: '#/definitions/model.Customer'
      customerId:
        type: integer
      id:
        type: integer
      paid:
        type: boolean
      reservationType:
        $ref: '#/definitions/model.ReservationType'
      reservationTypeId:
        type: integer
      reserved:
        type: boolean
      screening:
        $ref: '#/definitions/model.Screening'
      screeningId:
        type: integer
    type: object
  model.ReservationType:
    properties:
      id:
        type: integer
      type:
        type: string
    type: object
  model.ReservedSeat:
    properties:
      discountType:
        $ref: '#/definitions/model.DiscountType'
      discountTypeId:
        type: integer
      id:
        type: integer
      reservation:
        $ref: '#/definitions/model.Reservation'
      reservationId:
        type: integer
      screening:
        $ref: '#/definitions/model.Screening'
      screeningId:
        type: integer
      seat:
        $ref: '#/definitions/model.Seat'
      seatId:
        type: integer
    type: object
  model.Screening:
    properties:
      id:
        type: integer
      mm_type:
        $ref: '#/definitions/model.MovieMovieType'
      movie_hall:
        $ref: '#/definitions/model.MovieHall'
      movie_hall_id:
        type: integer
      movieMovieTypeId:
        type: integer
      start_of_screening:
        type: string
    type: object
  model.Seat:
    properties:
      col:
        type: integer
      id:
        type: integer
      movie_hall_id:
        type: integer
      movieHall:
        $ref: '#/definitions/model.MovieHall'
      row:
        type: integer
    type: object
host: localhost:4000
info:
  contact: {}
  description: This is a mistake.
  title: MovieTown API
  version: 0.1-alpha
paths:
  /api/v1/customer/delete:
    delete:
      consumes:
      - application/json
      description: Delete customer of sepcified id
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Delete Customer
      tags:
      - customer
  /api/v1/customer/info:
    get:
      consumes:
      - application/json
      description: get customer's info from token
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: type
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Gets information about employee with specified username
      tags:
      - customer
    put:
      consumes:
      - application/json
      description: update customer's info
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: updated employee information
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/api.requestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: type
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Updates cutomer's information
      tags:
      - customer
  /api/v1/customer/login:
    post:
      consumes:
      - application/json
      description: Login as a customer and return AccessToken (not yet implemented)
      parameters:
      - description: login customer DTO
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/api.apiCustomerLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Customer'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Login as a customer
      tags:
      - customer
  /api/v1/customer/password:
    put:
      consumes:
      - application/json
      description: customer changes their own password by themselfs
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: change employee password
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/api.changePasswordBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: ChangePassword
      tags:
      - customer
  /api/v1/customer/register:
    post:
      consumes:
      - application/json
      description: register new customer
      parameters:
      - description: create customer
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/api.apiCustomerRegister'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: type
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Creates new customer
      tags:
      - customer
  /api/v1/movies:
    get:
      consumes:
      - application/json
      description: get []model.Movie
      parameters:
      - description: title
        in: query
        name: title
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Movie'
            type: array
      summary: Show movies
      tags:
      - movie
  /api/v1/movies/{movie_id}:
    get:
      consumes:
      - application/json
      description: get []model.Movie
      parameters:
      - description: movie_id
        in: path
        name: movie_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Movie'
      summary: Show movie info
      tags:
      - movie
  /api/v1/reservations:
    get:
      consumes:
      - application/json
      description: get []reservationResponse by customer_id from token
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.reservationResponse'
            type: array
      summary: Show reservations
      tags:
      - reservations
  /api/v1/reservations/customer/{customer_id}:
    get:
      consumes:
      - application/json
      description: get []Reservation by customer_id
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: reservation search by customer_id
        format: int
        in: query
        name: customer_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Reservation'
      summary: Show reservations
      tags:
      - reservations
  /api/v1/reservations/customer/create:
    post:
      consumes:
      - application/json
      description: make reservation as a customer
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: guest reservation DTO
        in: body
        name: guestReservation
        required: true
        schema:
          $ref: '#/definitions/api.customerReservation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      summary: Customer makes a seat reservation for screening
      tags:
      - reservations
  /api/v1/reservations/discounts:
    get:
      description: Shows all discount available
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/model.DiscountType'
              type: array
            type: array
      summary: Shows all discount available
      tags:
      - reservations
  /api/v1/reservations/seats/{screening_id}:
    get:
      consumes:
      - application/json
      description: get takenSeats by customer_id
      parameters:
      - description: search reserved seats for screening_id
        format: int
        in: path
        name: screening_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.takenSeats'
      summary: Show reserved seats for screening
      tags:
      - reservations
  /api/v1/reservations/types:
    get:
      description: Show reservations types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/model.ReservationType'
              type: array
            type: array
      summary: Show reservations types
      tags:
      - reservations
  /api/v1/screening:
    get:
      consumes:
      - application/json
      description: get []Screening
      parameters:
      - description: first
        in: query
        name: from
        type: string
      - description: second
        in: query
        name: to
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Screening'
            type: array
      summary: Show screenings
      tags:
      - screening
  /api/v1/screening/{movie_id}:
    get:
      consumes:
      - application/json
      description: get []Screening by movie_id
      parameters:
      - description: screening search by movie_id
        format: int
        in: path
        name: movie_id
        type: integer
      - description: first
        in: query
        name: from
        type: string
      - description: second
        in: query
        name: to
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Screening'
            type: array
      summary: Show screenings
      tags:
      - screening
  /api/v1/screening/add:
    post:
      consumes:
      - application/json
      description: Boss is able to add a new screening
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: add screening DTO
        in: body
        name: screening
        required: true
        schema:
          $ref: '#/definitions/api.newScreening'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Add new screening
      tags:
      - screening
  /api/v1/screening/s/{id}:
    get:
      consumes:
      - application/json
      description: get Screening by id
      parameters:
      - description: screening search by id
        format: int
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Screening'
      summary: Show screenings
      tags:
      - screening
swagger: "2.0"
